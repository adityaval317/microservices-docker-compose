version: "3.9"
services:
  kafka:
    image: apache/kafka:4.0.0
    container_name: kafka-ms
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    extends:
      file: common-config.yml
      service: network-backend-service

  loki-read:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      backend:
        aliases:
          - loki

  loki-write:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-backend-service

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      MINIO_ROOT_USER: loki
      MINIO_ROOT_PASSWORD: supersecret
      MINIO_PROMETHEUS_AUTH_TYPE: public
      MINIO_UPDATE: off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-backend-service

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-backend-service

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3110"
      - "4318:4318"
    volumes:
      - ../observability/tempo/tempo.yml:/etc/tempo-config.yml
    extends:
      file: common-config.yml
      service: network-backend-service

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-backend-service

  backend:
    image: grafana/loki:latest
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-backend-service


  gateway:
    image: nginx:latest
    depends_on:
      - loki-read
      - loki-write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://loki-write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://loki-read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://loki-read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://loki-write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://loki-read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://loki-read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-backend-service

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak-ms
    ports:
      - "7080:8080"
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
#      - KC_HOSTNAME_STRICT=false
#      - KC_HOSTNAME_STRICT_HTTPS=false
#      - KC_PROXY=edge
#      - KC_HTTP_ENABLED=true
    command: "start-dev"
    extends:
      file: common-config.yml
      service: network-backend-service

  redis:
    image: redis:latest
    container_name: redis-ms
    ports:
      - "6379:6379"
    healthcheck:
      test: redis-cli ping
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: network-backend-service
  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq-ms
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: network-backend-service

  configserver:
    image: adityaval317/config-server:${BUILD_VERSION:-s8}
    container_name: configserver-ms
    ports:
      - "8071:8071"
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: curl --fail --silent http://localhost:8071/actuator/health/readiness | grep UP || exit 1
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      OTEL_SERVICE_NAME: config-server
    extends:
      file: common-config.yml
      service: microservice-base-service

  eurekaserver:
    image: adityaval317/eureka-server:${BUILD_VERSION:-s8}
    container_name: eureka-server-ms
    ports:
      - "8070:8070"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: curl --fail --silent http://localhost:8070/actuator/health/readiness | grep UP || exit 1
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: eureka-server
      OTEL_SERVICE_NAME: eureka-server
    extends:
      file: common-config.yml
      service: microservice-config-service


  accounts:
    image: adityaval317/accounts:${BUILD_VERSION:-s8}
    container_name: accounts-ms
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: curl --fail --silent http://localhost:8081/actuator/health/readiness | grep UP || exit 1
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    ports:
      - "8081:8081"
    environment:
      SPRING_APPLICATION_NAME: accounts
      OTEL_SERVICE_NAME: accounts
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092
    extends:
      file: common-config.yml
      service: microservice-application-service

  loans:
    image: adityaval317/loans:${BUILD_VERSION:-s8}
    container_name: loans-ms
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: curl --fail --silent http://localhost:8090/actuator/health/readiness | grep UP || exit 1
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    ports:
      - "8090:8090"
    environment:
      SPRING_APPLICATION_NAME: loans
      OTEL_SERVICE_NAME: loans
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092
    extends:
      file: common-config.yml
      service: microservice-application-service

  cards:
    image: adityaval317/cards:${BUILD_VERSION:-s8}
    container_name: cards-ms
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: curl --fail --silent http://localhost:9000/actuator/health/readiness | grep UP || exit 1
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    ports:
      - "9000:9000"
    environment:
      SPRING_APPLICATION_NAME: cards
      OTEL_SERVICE_NAME: eureka-cards
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092
    extends:
      file: common-config.yml
      service: microservice-application-service

  notification-service:
    image: adityaval317/notification-service:${BUILD_VERSION:-s8}
    container_name: notification-ms
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: curl --fail --silent http://localhost:9080/actuator/health/readiness | grep UP || exit 1
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    ports:
      - "9080:9080"
    environment:
      SPRING_APPLICATION_NAME: notification-service
      OTEL_SERVICE_NAME: notification-service
      SPRING_RABBITMQ_HOST: rabbitmq
    extends:
      file: common-config.yml
      service: network-backend-service

  gatewayserver:
    image: adityaval317/gateway-server:${BUILD_VERSION:-s8}
    container_name: gateway-server-ms
    depends_on:
#      keycloak:
#        condition: service_healthy
      redis:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      accounts:
        condition: service_healthy
      loans:
        condition: service_healthy
      cards:
        condition: service_healthy
    ports:
      - "8072:8072"
    environment:
      SPRING_APPLICATION_NAME: gateway-server
      OTEL_SERVICE_NAME: gateway-server
      SPRING_DATA_REDIS_HOST: redis
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://keycloak:8080/realms/master/protocol/openid-connect/certs"
    extends:
      file: common-config.yml
      service: microservice-eureka-service

networks:
  backend:
    driver: bridge